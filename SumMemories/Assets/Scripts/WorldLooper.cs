// WorldLooper.cs
using UnityEngine;

public class WorldLooper : MonoBehaviour
{
    [Header("????? ? ?? ??????")]
    [Tooltip("?????????? ???? ?? ??????? ???? ??? GameObject: Chunk0, Chunk1, Chunk2")]
    public Transform[] chunks = new Transform[3];

    [Tooltip("?????? ?????? ????? (? ??????? ????????). " +
             "????????, ???? ? ??? 40 ?????? ?? X ? ?????? ?????? 1 ????, ?????? 40.")]
    public float chunkWidth = 40f;

    // ?????????? ?????? ?? ?????/???????????/?????? ?????:
    private Transform leftChunk;
    private Transform centerChunk;
    private Transform rightChunk;

    // ??????? ? ??????? chunks[]
    private int leftIndex = 0;
    private int centerIndex = 1;
    private int rightIndex = 2;

    // ?????? ?? ??????
    private Transform camT;

    private void Start()
    {
        // ?????????, ??? ????????? ????? 3 ?????
        if (chunks.Length != 3)
        {
            Debug.LogError("WorldLooper: ????? ????? ??? ??????? ? ??????? chunks.");
            enabled = false;
            return;
        }
        if (chunks[0] == null || chunks[1] == null || chunks[2] == null)
        {
            Debug.LogError("WorldLooper: ??? ??? ???????? ??????? chunks ?????? ???? ????????? ? ??????????.");
            enabled = false;
            return;
        }

        // ?????????????? ??????? ? ??????
        leftIndex = 0;
        centerIndex = 1;
        rightIndex = 2;

        leftChunk = chunks[leftIndex];
        centerChunk = chunks[centerIndex];
        rightChunk = chunks[rightIndex];

        // ???????? ?????? ?? ??????? ?????? (????????????, ??? ??? MainCamera)
        if (Camera.main != null)
            camT = Camera.main.transform;
        else
            Debug.LogError("WorldLooper: ?? ??????? Main Camera.");
    }

    private void Update()
    {
        if (camT == null) return;

        float camX = camT.position.x;

        // ???????, ??? ??????? ?????? «????????» ?? ?????? ???? ??????
        float rightThreshold = centerChunk.position.x + (chunkWidth / 2f);
        // ???????, ??? ??????? ?????? «????????» ?? ????? ???? ??????
        float leftThreshold = centerChunk.position.x - (chunkWidth / 2f);

        // ???? ?????? ???????? ?????? ?? ?????? ??????? ???????????? ?????:
        if (camX > rightThreshold)
        {
            // ?????????? ????? ??? ?? ??????? ?????? ?? ???????:
            Vector3 newPos = rightChunk.position;
            newPos.x += chunkWidth;
            leftChunk.position = newPos;

            // ?????????? «????????» ???????: center?left, right?center, left (????????????)?right
            int oldLeft = leftIndex;
            int oldCenter = centerIndex;
            int oldRight = rightIndex;

            // now: 
            //   centerIndex = oldRight
            //   rightIndex  = oldLeft
            //   leftIndex   = oldCenter
            centerIndex = oldRight;
            rightIndex = oldLeft;
            leftIndex = oldCenter;

            // ????????? ??????
            leftChunk = chunks[leftIndex];
            centerChunk = chunks[centerIndex];
            rightChunk = chunks[rightIndex];
        }
        // ???? ?????? ???????? ????? ?? ????? ??????? ???????????? ?????:
        else if (camX < leftThreshold)
        {
            // ?????????? ?????? ??? ?? ??????? ????? ?? ??????:
            Vector3 newPos = leftChunk.position;
            newPos.x -= chunkWidth;
            rightChunk.position = newPos;

            // ?????????? «????????» ???????: center?right, left?center, right (????????????)?left
            int oldLeft = leftIndex;
            int oldCenter = centerIndex;
            int oldRight = rightIndex;

            // now:
            //   centerIndex = oldLeft
            //   leftIndex   = oldRight
            //   rightIndex  = oldCenter
            centerIndex = oldLeft;
            leftIndex = oldRight;
            rightIndex = oldCenter;

            // ????????? ??????
            leftChunk = chunks[leftIndex];
            centerChunk = chunks[centerIndex];
            rightChunk = chunks[rightIndex];
        }
    }
}
